/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

/* Layer definitions */
#define LAYER_HRM_macOS 0
#define LAYER_Fn 1  /* This is the "raise" layer in stock */
#define LAYER_Typing 2
#define LAYER_Cursor_macOS 3
#define LAYER_Mouse 4
#define LAYER_MouseSlow 5
#define LAYER_MouseFast 6
#define LAYER_MouseWarp 7
#define LAYER_Symbol 8
#define LAYER_Autoshift 9

/ {

    behaviors {
        /* Fn layer behavior - tap for sticky, hold for momentary */
        fn_layer: fn_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "FN_LAYER";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&mo LAYER_Fn>, <&sl LAYER_Fn>;
        };
        /* Caps Lock behavior - tap for ESC */
        caps_esc: caps_esc {
            compatible = "zmk,behavior-mod-morph";
            label = "CAPS_ESC";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;
            mods = <(MOD_LGUI)>;
        };

        /* Home Row Mods - Updated timings from Glove80 (except right pinky) */
        HRM_left_pinky: HRM_left_pinky {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LEFT_PINKY";
            #binding-cells = <2>;
            tapping-term-ms = <260>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 10 11 12 13 14 15 16 17 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84>;
            hold-trigger-on-release;
        };

        HRM_left_ring: HRM_left_ring {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LEFT_RING";
            #binding-cells = <2>;
            tapping-term-ms = <240>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 10 11 12 13 14 15 16 17 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84>;
            hold-trigger-on-release;
        };

        HRM_left_middle: HRM_left_middle {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LEFT_MIDDLE";
            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 10 11 12 13 14 15 16 17 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84>;
            hold-trigger-on-release;
        };

        HRM_left_index: HRM_left_index {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LEFT_INDEX";
            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 10 11 12 13 14 15 16 17 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84>;
            hold-trigger-on-release;
        };

        HRM_right_index: HRM_right_index {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RIGHT_INDEX";
            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 17 18 19 20 21 22 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84>;
            hold-trigger-on-release;
        };

        HRM_right_middle: HRM_right_middle {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RIGHT_MIDDLE";
            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 17 18 19 20 21 22 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84>;
            hold-trigger-on-release;
        };

        HRM_right_ring: HRM_right_ring {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RIGHT_RING";
            #binding-cells = <2>;
            tapping-term-ms = <240>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 17 18 19 20 21 22 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84>;
            hold-trigger-on-release;
        };

        HRM_right_pinky: HRM_right_pinky {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RIGHT_PINKY";
            #binding-cells = <2>;
            tapping-term-ms = <140>;  /* KEEPING ORIGINAL MWAVE TIMING */
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 17 18 19 20 21 22 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84>;
            hold-trigger-on-release;
        };

        /* Thumb layer access behaviors */
        thumb_layer: thumb_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_LAYER";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <300>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;
        };

        space_layer: space_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "SPACE_LAYER";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <70>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;
        };

        /* CapsWord behavior */
        caps_word_kp: caps_word_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPS_WORD_KP";
            #binding-cells = <2>;
            tapping-term-ms = <400>;
            bindings = <&kp>, <&caps_word>;
        };

        /* AutoShift Hold-Tap behavior */
        AS_HT: AS_HT {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HT";
            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "tap-preferred";
            bindings = <&AS_Shifted>, <&kp>;
        };

        /* Special hold-tap for typing layer left space */
        typing_space: typing_space {
            compatible = "zmk,behavior-hold-tap";
            label = "TYPING_SPACE";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        /* AutoShift macros */
        AS_Shifted: AS_Shifted {
            label = "AS_SHIFTED";
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_press &kp LSHFT>,
                       <&macro_tap &macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                       <&macro_release &kp LSHFT>;
        };

        AS: AS {
            label = "AUTOSHIFT";
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            tap-ms = <10>;
            wait-ms = <10>;
            bindings = <&macro_press &macro_param_1to1 &macro_param_1to2 &AS_HT MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                       <&macro_pause_for_release>,
                       <&macro_release &macro_param_1to1 &macro_param_1to2 &AS_HT MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };

        /* Cursor macros */
        cur_select_line_mac: cur_select_line_mac {
            label = "SELECT_LINE_MAC";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp LG(LEFT)>, <&kp LG(LS(RIGHT))>;
        };

        cur_select_word_mac: cur_select_word_mac {
            label = "SELECT_WORD_MAC";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp LA(LEFT)>, <&kp LA(LS(RIGHT))>;
        };

        cur_extend_line_mac: cur_extend_line_mac {
            label = "EXTEND_LINE_MAC";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp LG(LS(RIGHT))>;
        };

        cur_extend_word_mac: cur_extend_word_mac {
            label = "EXTEND_WORD_MAC";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp LA(LS(RIGHT))>;
        };

        cur_select_none: cur_select_none {
            label = "SELECT_NONE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp DOWN>, <&kp UP>, <&kp RIGHT>, <&kp LEFT>;
        };

        /* Tab switching macros */
        mod_tab: mod_tab {
            label = "MOD_TAB";
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            tap-ms = <0>;
            wait-ms = <0>;
            bindings = <&macro_press &macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                       <&macro_tap &kp TAB>,
                       <&macro_pause_for_release>,
                       <&macro_release &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
        };
    };

    combos {
        compatible = "zmk,combos";
        
        combo_caps {
            timeout-ms = <50>;
            key-positions = <59 64>; /* Both shift keys - updated for actual layout */
            bindings = <&kp CAPS>;
            layers = <0 2 9>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_HRM_macOS {
            bindings = <
/* Extended top row */
&kp ESC    &kp F1     &kp F2     &kp F3     &kp F4      &kp F5     &kp F6       &kp F7      &kp F8     &kp F9    &kp F10   &kp F11    &kp F12    &kp HOME    &kp END     &kp PSCRN   &fn_layer
/* Number row */
&kp GRAVE  &kp N1     &kp N2     &kp N3     &kp N4      &kp N5     &kp N6       &kp N7      &kp N8     &kp N9    &kp N0    &kp MINUS  &kp EQUAL  &kp BSPC                         &kp DEL
/* QWERTY row */
&kp TAB    &kp Q      &kp W      &kp E      &kp R       &kp T      &kp Y        &kp U       &kp I      &kp O     &kp P     &kp LBKT   &kp RBKT   &kp BSLH                                              &none
/* Home row with HRM */
&caps_esc  &HRM_left_pinky LSHFT A  &HRM_left_ring LCTRL S  &HRM_left_middle LALT D  &HRM_left_index LGUI F  &kp G  &kp H  &HRM_right_index LGUI J  &HRM_right_middle RALT K  &HRM_right_ring RCTRL L  &HRM_right_pinky RSHFT SEMI  &kp SQT  &kp RET  &kp PG_UP
/* Bottom letter row */
&kp LSHFT  &kp Z      &kp X      &kp C      &kp V       &kp B      &kp N        &kp M       &kp COMMA  &kp DOT   &kp FSLH                                &kp RSHFT  &kp UP     &kp PG_DN
/* Control row */
&kp LCTRL  &kp LALT   &kp LGUI   &thumb_layer LAYER_Cursor_macOS SPACE   &space_layer LAYER_Mouse SPACE   &kp RGUI   &kp RALT     &kp RCTRL   &kp LEFT   &kp DOWN  &kp RIGHT
            >;
        };

        layer_Fn {
            bindings = <
/* Extended top row */
&kp ESC    &kp F1     &kp F2     &kp F3     &kp F4      &kp F5     &kp F6       &kp F7      &kp F8     &kp F9    &kp F10   &kp F11    &bt BT_CLR &kp HOME    &kp END     &none       &trans
/* Number row - layer switching */
&to 0      &to 1      &to 2      &to 3      &to 4       &to 5      &to 6        &to 7       &to 8      &to 9     &to 0     &kp MINUS  &kp EQUAL  &kp BSPC                         &none
/* Numpad 789 */
&kp TAB    &none      &none      &none      &none       &none      &none        &kp KP_N7   &kp KP_N8  &kp KP_N9 &kp KP_MINUS &none     &none      &none                                                 &kp DEL
/* Numpad 456 */
&none      &none      &none      &none      &none       &none      &none        &kp KP_N4   &kp KP_N5  &kp KP_N6 &kp KP_PLUS  &none     &kp RET    &kp PG_UP
/* Numpad 123 */
&kp LSHFT  &none      &none      &none      &none       &none      &none        &kp KP_N1   &kp KP_N2  &kp KP_N3 &kp KP_ENTER                       &kp RSHFT  &kp UP     &kp PG_DN
/* Numpad 0 and dot */
&none      &none      &none      &kp SPACE  &kp KP_N0   &none      &kp KP_DOT   &none       &kp LEFT   &kp DOWN  &kp RIGHT
            >;
        };

        layer_Typing {
            bindings = <
/* Extended top row - keep same as base */
&kp ESC    &kp F1     &kp F2     &kp F3     &kp F4      &kp F5     &kp F6       &kp F7      &kp F8     &kp F9    &kp F10   &kp F11    &kp F12    &kp HOME    &kp END     &kp PSCRN   &fn_layer
/* Number row - no ctrl behaviors */
&kp GRAVE  &kp N1     &kp N2     &kp N3     &kp N4      &kp N5     &kp N6       &kp N7      &kp N8     &kp N9    &kp N0    &kp MINUS  &kp EQUAL  &kp BSPC                         &kp DEL
/* QWERTY row */
&kp TAB    &kp Q      &kp W      &kp E      &kp R       &kp T      &kp Y        &kp U       &kp I      &kp O     &kp P     &kp LBKT   &kp RBKT   &kp BSLH                                              &none
/* Home row - no HRM */
&kp CAPS   &kp A      &kp S      &kp D      &kp F       &kp G      &kp H        &kp J       &kp K      &kp L     &kp SEMI  &kp SQT    &kp RET    &kp PG_UP
/* Bottom letter row */
&kp LSHFT  &kp Z      &kp X      &kp C      &kp V       &kp B      &kp N        &kp M       &kp COMMA  &kp DOT   &kp FSLH                         &kp RSHFT  &kp UP     &kp PG_DN
/* Control row - special left space and cmd->alt */
&kp LCTRL  &kp LALT   &kp LALT   &typing_space LGUI BSPC   &kp SPACE   &kp RGUI   &kp RALT     &kp RCTRL   &kp LEFT   &kp DOWN  &kp RIGHT
            >;
        };

        layer_Cursor_macOS {
            bindings = <
/* Extended top row */
&trans     &trans     &trans     &trans     &trans      &trans     &trans       &trans      &trans     &trans    &trans    &trans     &trans     &trans      &trans      &trans      &fn_layer
/* Number row */
&trans     &trans     &trans     &trans     &trans      &trans     &trans       &trans      &trans     &trans    &trans    &trans     &trans     &trans                              &trans
/* Nav keys */
&trans     &trans     &trans     &trans     &trans      &trans     &trans       &kp PG_UP   &kp UP     &kp PG_DN &trans    &trans     &trans     &trans                              &trans
/* Home row nav */
&trans     &trans     &trans     &trans     &trans      &trans     &kp HOME     &kp LEFT    &kp DOWN   &kp RIGHT &kp END   &trans     &trans     &trans
/* Bottom row */
&trans     &trans     &trans     &trans     &trans      &trans     &trans       &trans      &trans     &trans    &trans                           &trans     &trans      &trans
/* Control row */
&trans     &trans     &trans     &trans     &trans      &trans     &trans       &trans      &trans     &trans    &trans
            >;
        };

        layer_Mouse {
            bindings = <
/* Extended top row */
&trans     &trans     &trans     &trans     &trans      &trans     &trans       &trans      &trans     &trans    &trans    &trans     &trans     &trans      &trans      &trans      &fn_layer
/* Number row */
&trans     &trans     &trans     &trans     &trans      &trans     &trans       &mo 5       &mo 6      &mo 7     &trans    &trans     &trans     &trans                              &trans
/* Mouse controls */
&trans     &trans  &kp PG_DN  &trans  &kp PG_UP      &trans     &msc SCRL_DOWN  &mkp LCLK  &mmv MOVE_UP  &mkp RCLK  &sk RGUI  &trans     &trans     &trans                              &trans
/* Mouse movement */
&trans     &trans     &mo 5      &mo 6      &mo 7       &trans     &msc SCRL_UP  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp MCLK  &mkp MB4   &trans     &trans
/* Mouse buttons */
&trans     &trans     &trans     &trans     &trans      &trans     &trans       &msc SCRL_LEFT  &msc SCRL_RIGHT  &trans  &mkp MB5                         &trans     &trans      &trans
/* Control row */
&trans     &trans     &trans     &mkp LCLK  &mkp RCLK   &mkp MCLK  &kp K_APP    &trans      &trans     &trans    &trans
            >;
        };

        layer_MouseSlow {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &fn_layer
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_MouseFast {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &fn_layer
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_MouseWarp {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &fn_layer
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_Symbol {
            bindings = <
/* Extended top row */
&trans     &trans     &trans     &trans     &trans      &trans     &trans       &trans      &trans     &trans    &trans    &trans     &trans     &trans      &trans      &trans      &fn_layer
/* Symbol row 1 */
&kp GRAVE  &kp RBKT   &kp LPAR   &kp RPAR   &kp SEMI    &kp DOT    &trans       &trans      &trans     &trans    &trans    &trans     &trans     &trans                              &trans
/* Symbol row 2 */
&kp LBKT   &kp EXCL   &kp LBRC   &kp RBRC   &kp COMMA   &kp QMARK  &kp GRAVE    &sk RSHFT   &sk RCTRL  &sk RALT  &sk RGUI  &trans     &trans     &trans                              &trans
/* Symbol row 3 */
&kp HASH   &kp CARET  &kp EQUAL  &kp UNDER  &kp DLLR    &kp STAR   &kp DQT      &kp BSPC    &kp TAB    &kp SPACE &kp RET   &trans     &trans     &trans
/* Symbol row 4 */
&kp TILDE  &kp LT     &kp PIPE   &kp MINUS  &kp GT      &kp FSLH   &kp SQT      &kp DEL     &kp LS(TAB) &kp INS  &kp ESC                           &trans     &trans      &trans
/* Symbol row 5 */
&trans     &kp AMPS   &kp SQT    &kp DQT    &kp PLUS    &kp PRCNT  &kp COLON    &kp AT      &trans     &trans    &trans
            >;
        };

        layer_Autoshift {
            bindings = <
/* Extended top row */
&trans     &trans     &trans     &trans     &trans      &trans     &trans       &trans      &trans     &trans    &trans    &trans     &trans     &trans      &trans      &trans      &fn_layer
/* Number row */
&AS GRAVE  &AS N1     &AS N2     &AS N3     &AS N4      &AS N5     &AS N6       &AS N7      &AS N8     &AS N9    &AS N0    &AS MINUS  &AS EQUAL  &trans                              &trans
/* QWERTY row */
&trans     &AS Q      &AS W      &AS E      &AS R       &AS T      &AS Y        &AS U       &AS I      &AS O     &AS P     &AS LBKT   &AS RBKT   &AS BSLH                            &trans
/* Home row */
&trans     &AS A      &AS S      &AS D      &AS F       &AS G      &AS H        &AS J       &AS K      &AS L     &AS SEMI  &AS SQT    &trans     &trans
/* Bottom letter row */
&trans     &AS Z      &AS X      &AS C      &AS V       &AS B      &AS N        &AS M       &AS COMMA  &AS DOT   &AS FSLH                         &trans     &trans      &trans
/* Control row */
&trans     &trans     &trans     &trans     &trans      &trans     &trans       &trans      &trans     &trans    &trans
            >;
        };
    };
};
