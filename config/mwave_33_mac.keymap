/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/advertising_mode.h>
#include <behaviors/advertising_mode.dtsi>
#include <behaviors/stp_indicators.dtsi>
#include "studio-macros.dtsi"

/* Layer definitions */
#define LAYER_HRM_macOS 0
#define LAYER_Cursor_macOS 1
#define LAYER_Mouse 2
#define LAYER_MouseSlow 3
#define LAYER_MouseFast 4
#define LAYER_MouseWarp 5
#define LAYER_Typing 6
#define LAYER_HRM_WinLinx 7
#define LAYER_Cursor 8
#define LAYER_Lower 9
#define LAYER_Autoshift 10

/* To deal with the situation where there is no Lower layer */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/ {
    #include "mwave_prim.dtsi"

    behaviors {
        /* For the "layer" key, tap dance for momentary/toggle */
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };

        /* Caps Lock behavior - tap for ESC, Cmd+tap for window switch */
        caps_esc: caps_esc {
            compatible = "zmk,behavior-mod-morph";
            label = "CAPS_ESC";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;
            mods = <(MOD_LGUI)>;
        };

        /* Ctrl+Number layer switching */
        ctrl_num_0: ctrl_num_0 {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_NUM_0";
            #binding-cells = <0>;
            bindings = <&kp N0>, <&to 0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        ctrl_num_1: ctrl_num_1 {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_NUM_1";
            #binding-cells = <0>;
            bindings = <&kp N1>, <&to 1>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        ctrl_num_2: ctrl_num_2 {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_NUM_2";
            #binding-cells = <0>;
            bindings = <&kp N2>, <&to 2>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        ctrl_num_3: ctrl_num_3 {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_NUM_3";
            #binding-cells = <0>;
            bindings = <&kp N3>, <&to 3>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        ctrl_num_4: ctrl_num_4 {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_NUM_4";
            #binding-cells = <0>;
            bindings = <&kp N4>, <&to 4>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        ctrl_num_5: ctrl_num_5 {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_NUM_5";
            #binding-cells = <0>;
            bindings = <&kp N5>, <&to 5>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        ctrl_num_6: ctrl_num_6 {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_NUM_6";
            #binding-cells = <0>;
            bindings = <&kp N6>, <&to 6>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        ctrl_num_7: ctrl_num_7 {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_NUM_7";
            #binding-cells = <0>;
            bindings = <&kp N7>, <&to 7>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        ctrl_num_8: ctrl_num_8 {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_NUM_8";
            #binding-cells = <0>;
            bindings = <&kp N8>, <&to 8>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        ctrl_num_9: ctrl_num_9 {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_NUM_9";
            #binding-cells = <0>;
            bindings = <&kp N9>, <&to 9>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        /* Home Row Mods */
        HRM_left_pinky: HRM_left_pinky {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LEFT_PINKY";
            #binding-cells = <2>;
            tapping-term-ms = <140>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <6 7 8 9 10 11 12 13 18 19 20 21 22 23 24 25 30 31 32 33 34 35 36 37 42 43 44 45 46 47 48 49 54 55 56 57 58>;
            hold-trigger-on-release;
        };

        HRM_left_ring: HRM_left_ring {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LEFT_RING";
            #binding-cells = <2>;
            tapping-term-ms = <140>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <6 7 8 9 10 11 12 13 18 19 20 21 22 23 24 25 30 31 32 33 34 35 36 37 42 43 44 45 46 47 48 49 54 55 56 57 58>;
            hold-trigger-on-release;
        };

        HRM_left_middle: HRM_left_middle {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LEFT_MIDDLE";
            #binding-cells = <2>;
            tapping-term-ms = <140>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <6 7 8 9 10 11 12 13 18 19 20 21 22 23 24 25 30 31 32 33 34 35 36 37 42 43 44 45 46 47 48 49 54 55 56 57 58>;
            hold-trigger-on-release;
        };

        HRM_left_index: HRM_left_index {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LEFT_INDEX";
            #binding-cells = <2>;
            tapping-term-ms = <140>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <6 7 8 9 10 11 12 13 18 19 20 21 22 23 24 25 30 31 32 33 34 35 36 37 42 43 44 45 46 47 48 49 54 55 56 57 58>;
            hold-trigger-on-release;
        };

        HRM_right_index: HRM_right_index {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RIGHT_INDEX";
            #binding-cells = <2>;
            tapping-term-ms = <140>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 5 14 15 16 17 26 27 28 29 38 39 40 41 50 51 52 53>;
            hold-trigger-on-release;
        };

        HRM_right_middle: HRM_right_middle {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RIGHT_MIDDLE";
            #binding-cells = <2>;
            tapping-term-ms = <140>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 5 14 15 16 17 26 27 28 29 38 39 40 41 50 51 52 53>;
            hold-trigger-on-release;
        };

        HRM_right_ring: HRM_right_ring {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RIGHT_RING";
            #binding-cells = <2>;
            tapping-term-ms = <140>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 5 14 15 16 17 26 27 28 29 38 39 40 41 50 51 52 53>;
            hold-trigger-on-release;
        };

        HRM_right_pinky: HRM_right_pinky {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RIGHT_PINKY";
            #binding-cells = <2>;
            tapping-term-ms = <140>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 5 14 15 16 17 26 27 28 29 38 39 40 41 50 51 52 53>;
            hold-trigger-on-release;
        };

        /* Thumb layer access behaviors */
        thumb_layer: thumb_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_LAYER";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <300>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;
        };

        space_layer: space_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "SPACE_LAYER";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <70>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;
        };

        /* AutoShift Hold-Tap behavior */
        AS_HT: AS_HT {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HT";
            #binding-cells = <2>;
            tapping-term-ms = <190>;
            flavor = "tap-preferred";
            bindings = <&AS_Shifted>, <&kp>;
        };
    };

    macros {
        /* AutoShift macros */
        AS_Shifted: AS_Shifted {
            label = "AS_SHIFTED";
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_press &kp LSHFT>,
                       <&macro_tap &macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                       <&macro_release &kp LSHFT>;
        };

        AS: AS {
            label = "AUTOSHIFT";
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            tap-ms = <10>;
            wait-ms = <10>;
            bindings = <&macro_press &macro_param_1to1 &macro_param_1to2 &AS_HT MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                       <&macro_pause_for_release>,
                       <&macro_release &macro_param_1to1 &macro_param_1to2 &AS_HT MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };

        /* Cursor macros */
        cur_select_line_mac: cur_select_line_mac {
            label = "SELECT_LINE_MAC";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp LG(LEFT)>, <&kp LG(LS(RIGHT))>;
        };

        cur_select_word_mac: cur_select_word_mac {
            label = "SELECT_WORD_MAC";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp LA(LEFT)>, <&kp LA(LS(RIGHT))>;
        };

        cur_extend_line_mac: cur_extend_line_mac {
            label = "EXTEND_LINE_MAC";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp LG(LS(RIGHT))>;
        };

        cur_extend_word_mac: cur_extend_word_mac {
            label = "EXTEND_WORD_MAC";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp LA(LS(RIGHT))>;
        };

        cur_select_none: cur_select_none {
            label = "SELECT_NONE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp DOWN>, <&kp UP>, <&kp RIGHT>, <&kp LEFT>;
        };

        /* Win/Linux cursor macros */
        cur_select_line: cur_select_line {
            label = "SELECT_LINE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp HOME>, <&kp LS(END)>;
        };

        cur_select_word: cur_select_word {
            label = "SELECT_WORD";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp LC(LEFT)>, <&kp LC(LS(RIGHT))>;
        };

        cur_extend_line: cur_extend_line {
            label = "EXTEND_LINE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp LS(END)>;
        };

        cur_extend_word: cur_extend_word {
            label = "EXTEND_WORD";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&kp LC(LS(RIGHT))>;
        };

        /* Fast mouse movement macros */
        mouse_fast_up: mouse_fast_up {
            label = "MOUSE_FAST_UP";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&mmv MOVE_UP>, <&mmv MOVE_UP>, <&mmv MOVE_UP>;
        };

        mouse_fast_down: mouse_fast_down {
            label = "MOUSE_FAST_DOWN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&mmv MOVE_DOWN>, <&mmv MOVE_DOWN>, <&mmv MOVE_DOWN>;
        };

        mouse_fast_left: mouse_fast_left {
            label = "MOUSE_FAST_LEFT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&mmv MOVE_LEFT>, <&mmv MOVE_LEFT>, <&mmv MOVE_LEFT>;
        };

        mouse_fast_right: mouse_fast_right {
            label = "MOUSE_FAST_RIGHT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&mmv MOVE_RIGHT>, <&mmv MOVE_RIGHT>, <&mmv MOVE_RIGHT>;
        };

        /* Warp mouse movement macros */
        mouse_warp_up: mouse_warp_up {
            label = "MOUSE_WARP_UP";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&mmv MOVE_UP>, <&mmv MOVE_UP>, <&mmv MOVE_UP>, <&mmv MOVE_UP>, <&mmv MOVE_UP>, <&mmv MOVE_UP>;
        };

        mouse_warp_down: mouse_warp_down {
            label = "MOUSE_WARP_DOWN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&mmv MOVE_DOWN>, <&mmv MOVE_DOWN>, <&mmv MOVE_DOWN>, <&mmv MOVE_DOWN>, <&mmv MOVE_DOWN>, <&mmv MOVE_DOWN>;
        };

        mouse_warp_left: mouse_warp_left {
            label = "MOUSE_WARP_LEFT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&mmv MOVE_LEFT>, <&mmv MOVE_LEFT>, <&mmv MOVE_LEFT>, <&mmv MOVE_LEFT>, <&mmv MOVE_LEFT>, <&mmv MOVE_LEFT>;
        };

        mouse_warp_right: mouse_warp_right {
            label = "MOUSE_WARP_RIGHT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <1>;
            wait-ms = <1>;
            bindings = <&mmv MOVE_RIGHT>, <&mmv MOVE_RIGHT>, <&mmv MOVE_RIGHT>, <&mmv MOVE_RIGHT>, <&mmv MOVE_RIGHT>, <&mmv MOVE_RIGHT>;
        };
    };

    combos {
        compatible = "zmk,combos";
        
        combo_caps {
            timeout-ms = <50>;
            key-positions = <39 47>; /* Both shift keys on MWave layout */
            bindings = <&kp CAPS>;
            layers = <0 7 10>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_HRM_macOS {
            display-name = "macOS HRM";
            bindings = <
&kp ESC    &kp C_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PREV  &kp C_PP       &kp C_NEXT     &bl BL_CYCLE  &kp F11    &kp LS(LC(LG(NUMBER_4)))  &kp LC(UP_ARROW)  &kp LG(SPACE)  &bt BT_CLR  &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp K_POWER  &to 1
&kp GRAVE  &ctrl_num_1   &ctrl_num_2   &ctrl_num_3   &ctrl_num_4 &ctrl_num_5    &ctrl_num_6    &ctrl_num_7   &ctrl_num_8 &ctrl_num_9               &ctrl_num_0       &kp MINUS      &kp EQUAL   &kp BSPC
&kp TAB    &kp Q         &kp W         &kp E         &kp R       &kp T          &kp Y          &kp U         &kp I      &kp O                     &kp P             &kp LBKT       &kp RBKT    &kp BSLH        &kp DEL
&caps_esc  &HRM_left_pinky LSHFT A     &HRM_left_ring LCTRL S    &HRM_left_middle LALT D       &HRM_left_index LGUI F    &kp G          &kp H          &HRM_right_index LGUI J         &HRM_right_middle RALT K      &HRM_right_ring RCTRL L       &HRM_right_pinky RSHFT SEMI   &kp SQT        &kp RET     &kp PG_UP
&kp LSHFT  &kp Z         &kp X         &kp C         &kp V       &kp B          &kp N          &kp M         &kp COMMA  &kp DOT                   &kp FSLH          &kp RSHFT      &kp UP      &kp PG_DN
&kp LCTRL  &kp LEFT_ALT  &kp LEFT_GUI  &thumb_layer LAYER_Cursor_macOS SPACE     &space_layer LAYER_Mouse SPACE  &kp RIGHT_GUI  &kp RIGHT_ALT  &kp RCTRL     &kp LEFT   &kp DOWN                  &kp RIGHT
            >;
        };

        layer_Cursor_macOS {
            display-name = "Cursor macOS";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp PG_UP  &kp UP  &kp PG_DN  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp HOME  &kp LEFT  &kp DOWN  &kp RIGHT  &kp END  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_Mouse {
            display-name = "Mouse";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &mkp LCLK  &mmv MOVE_UP  &mkp RCLK  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &mo 3  &mo 4  &mo 5  &trans  &msc SCRL_UP  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp MCLK  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_RIGHT  &mkp RCLK  &trans  &trans  &trans
&trans  &trans  &trans  &mkp LCLK  &mkp RCLK  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_MouseSlow {
            display-name = "Mouse Slow";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &mkp LCLK  &mmv MOVE_UP  &mkp RCLK  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &msc SCRL_UP  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp MCLK  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_RIGHT  &mkp RCLK  &trans  &trans  &trans
&trans  &trans  &trans  &mkp LCLK  &mkp RCLK  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_MouseFast {
            display-name = "Mouse Fast";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &mkp LCLK  &mouse_fast_up  &mkp RCLK  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &msc SCRL_UP  &mouse_fast_left  &mouse_fast_down  &mouse_fast_right  &mkp MCLK  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_RIGHT  &mkp RCLK  &trans  &trans  &trans
&trans  &trans  &trans  &mkp LCLK  &mkp RCLK  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_MouseWarp {
            display-name = "Mouse Warp";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &mkp LCLK  &mouse_warp_up  &mkp RCLK  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &msc SCRL_UP  &mouse_warp_left  &mouse_warp_down  &mouse_warp_right  &mkp MCLK  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_RIGHT  &mkp RCLK  &trans  &trans  &trans
&trans  &trans  &trans  &mkp LCLK  &mkp RCLK  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        layer_Typing {
            display-name = "Typing";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&kp GRAVE  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &kp MINUS  &kp EQUAL  &kp BSPC
&kp TAB  &kp Q  &kp W  &kp E  &kp R  &kp T  &kp Y  &kp U  &kp I  &kp O  &kp P  &kp LBKT  &kp RBKT  &kp BSLH  &kp DEL
&kp ESC  &kp A  &kp S  &kp D  &kp F  &kp G  &kp H  &kp J  &kp K  &kp L  &kp SEMI  &kp SQT  &kp RET  &kp PG_UP
&kp LSHFT  &kp Z  &kp X  &kp C  &kp V  &kp B  &kp N  &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT  &kp UP  &kp PG_DN
&kp LCTRL  &kp LEFT_ALT  &kp LEFT_GUI  &kp SPACE  &kp SPACE  &kp RIGHT_GUI  &kp RIGHT_ALT  &kp RCTRL  &kp LEFT  &kp DOWN  &kp RIGHT
            >;
        };

        layer_HRM_WinLinx {
            display-name = "Win/Linux HRM";
            bindings = <
&kp ESC    &kp C_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PREV  &kp C_PP       &kp C_NEXT     &bl BL_CYCLE  &kp F11    &kp LS(LC(LG(NUMBER_4)))  &kp LC(UP_ARROW)  &kp LG(SPACE)  &bt BT_CLR  &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp K_POWER  &to 1
&kp GRAVE  &ctrl_num_1   &ctrl_num_2   &ctrl_num_3   &ctrl_num_4 &ctrl_num_5    &ctrl_num_6    &ctrl_num_7   &ctrl_num_8 &ctrl_num_9               &ctrl_num_0       &kp MINUS      &kp EQUAL   &kp BSPC
&kp TAB    &kp Q         &kp W         &kp E         &kp R       &kp T          &kp Y          &kp U         &kp I      &kp O                     &kp P             &kp LBKT       &kp RBKT    &kp BSLH        &kp DEL
&kp ESC    &HRM_left_pinky LGUI A       &HRM_left_ring LALT S     &HRM_left_middle LCTRL D      &HRM_left_index LSHFT F   &kp G          &kp H          &HRM_right_index RSHFT J        &HRM_right_middle RCTRL K     &HRM_right_ring LALT L        &HRM_right_pinky LGUI SEMI    &kp SQT        &kp RET     &kp PG_UP
&kp LSHFT  &kp Z         &kp X         &kp C         &kp V       &kp B          &kp N          &kp M         &kp COMMA  &kp DOT                   &kp FSLH          &kp RSHFT      &kp UP      &kp PG_DN
&kp LCTRL  &kp LEFT_ALT  &kp LEFT_GUI  &thumb_layer LAYER_Cursor SPACE         &space_layer LAYER_Mouse SPACE  &kp RIGHT_GUI  &kp RIGHT_ALT  &kp RCTRL     &kp LEFT   &kp DOWN                  &kp RIGHT
            >;
        };

        layer_Cursor {
            display-name = "Cursor Win";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp ESC  &kp INS  &kp LS(TAB)  &kp DEL  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp RET  &kp SPACE  &kp TAB  &kp BSPC  &kp LC(X)  &kp LC(X)  &kp LS(TAB)  &kp LC(Z)  &kp LC(Y)  &kp TAB  &trans  &trans  &trans  &trans
&sk LSHFT  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &kp LC(C)  &kp LC(C)  &kp LEFT  &kp UP  &kp DOWN  &kp RIGHT  &sk RSHFT  &trans  &trans
&kp LC(L)  &kp LC(A)  &cur_select_line  &cur_select_word  &kp LC(F)  &kp LC(V)  &kp LC(V)  &kp HOME  &kp PG_UP  &kp PG_DN  &kp END  &kp LC(L)  &trans  &trans
&kp LC(K)  &kp LC(Z)  &kp LC(Y)  &cur_select_none  &kp LC(F)  &kp LC(LS(G))  &kp LC(G)  &kp LC(H)  &kp LC(K)  &trans  &trans
            >;
        };

        layer_Lower {
            display-name = "Lower";
            bindings = <
&kp C_BRI_DN &kp C_BRI_UP &kp C_PREV &kp C_NEXT &kp C_PP   &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP &trans     &kp PAUSE_BREAK &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans       &to 1        &to 2      &to 3      &to 4      &to 5      &to 6        &to 7        &to 8      &to 9           &to 0       &kp PRINTSCREEN  &trans  &trans
&trans       &trans       &trans     &kp UP     &trans     &kp END    &kp RPAR     &kp KP_N7    &kp KP_N8  &kp KP_N9       &kp KP_MINUS &to 10  &trans  &trans  &trans
&trans       &trans       &kp LEFT   &kp DOWN   &kp RIGHT  &kp PG_UP  &kp PERCENT  &kp KP_N4    &kp KP_N5  &kp KP_N6       &kp KP_PLUS  &trans  &trans  &trans
&trans       &kp K_APP    &trans     &kp F11    &kp F12    &kp PG_DN  &kp COMMA    &kp KP_N1    &kp KP_N2  &kp KP_N3       &kp KP_ENTER &trans  &trans  &trans
&trans       &kp CAPS     &kp INS    &kp KP_N0  &kp KP_DOT &trans     &trans       &trans       &trans     &trans          &trans
            >;
        };

        layer_Autoshift {
            display-name = "AutoShift";
            bindings = <
&trans    &trans   &trans   &trans   &trans   &trans   &trans   &trans   &trans    &trans    &trans    &trans  &trans  &trans  &trans  &trans  &trans
&AS GRAVE &AS N1   &AS N2   &AS N3   &AS N4   &AS N5   &AS N6   &AS N7   &AS N8    &AS N9    &AS N0    &AS MINUS  &AS EQUAL  &trans
&trans    &AS Q    &AS W    &AS E    &AS R    &AS T    &AS Y    &AS U    &AS I     &AS O     &AS P     &AS LBKT  &AS RBKT  &AS BSLH  &trans
&trans    &AS A    &AS S    &AS D    &AS F    &AS G    &AS H    &AS J    &AS K     &AS L     &AS SEMI  &AS SQT   &trans    &trans
&trans    &AS Z    &AS X    &AS C    &AS V    &AS B    &AS N    &AS M    &AS COMMA &AS DOT   &AS FSLH  &trans    &trans    &trans
&trans    &trans   &trans   &trans   &trans   &trans   &trans   &trans   &trans    &trans    &trans
            >;
        };
    };
};
