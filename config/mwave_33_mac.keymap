#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/advertising_mode.h>
#include <behaviors/advertising_mode.dtsi>
#include <behaviors/stp_indicators.dtsi>
#include "studio-macros.dtsi"

/ {
    #include "mwave_prim.dtsi"
    
    behaviors {
        /* Caps Lock behavior - tap for ESC/Cmd+Grave, hold for right option */
        caps_esc: caps_esc {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPS_ESC";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&caps_morph>;
        };

        /* Mod-morph for caps - ESC normally, Grave when Cmd is held */
        caps_morph: caps_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "CAPS_MORPH";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        /* Right Ctrl + Number layer access behaviors */
        rctrl_num_0: rctrl_num_0 {
            compatible = "zmk,behavior-mod-morph";
            label = "RCTRL_NUM_0";
            #binding-cells = <0>;
            bindings = <&kp N0>, <&to 0>;
            mods = <(MOD_RCTL)>;
        };

        rctrl_num_1: rctrl_num_1 {
            compatible = "zmk,behavior-mod-morph";
            label = "RCTRL_NUM_1";
            #binding-cells = <0>;
            bindings = <&kp N1>, <&to 1>;
            mods = <(MOD_RCTL)>;
        };

        rctrl_num_2: rctrl_num_2 {
            compatible = "zmk,behavior-mod-morph";
            label = "RCTRL_NUM_2";
            #binding-cells = <0>;
            bindings = <&kp N2>, <&to 2>;
            mods = <(MOD_RCTL)>;
        };

        rctrl_num_3: rctrl_num_3 {
            compatible = "zmk,behavior-mod-morph";
            label = "RCTRL_NUM_3";
            #binding-cells = <0>;
            bindings = <&kp N3>, <&to 3>;
            mods = <(MOD_RCTL)>;
        };

        /* Home Row Mods with mWave key positions */
        HRM_left_pinky_v1_TKZ: HRM_left_pinky_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LEFT_PINKY";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 14 15 16 24 25 26 27 28 29 30 37 38 39 40 41 42 43 44 45 52 53 54 55 56 57 58 59 66 67 68 69 70 71 72 73 78 79 80 81 82 83 84>;
            hold-trigger-on-release;
        };

        HRM_left_ring_v1_TKZ: HRM_left_ring_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LEFT_RING";
            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 14 15 16 24 25 26 27 28 29 30 37 38 39 40 41 42 43 44 45 52 53 54 55 56 57 58 59 66 67 68 69 70 71 72 73 78 79 80 81 82 83 84>;
            hold-trigger-on-release;
        };

        HRM_left_middy_v1_TKZ: HRM_left_middy_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LEFT_MIDDLE";
            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 14 15 16 24 25 26 27 28 29 30 37 38 39 40 41 42 43 44 45 52 53 54 55 56 57 58 59 66 67 68 69 70 71 72 73 78 79 80 81 82 83 84>;
            hold-trigger-on-release;
        };

        HRM_left_index_v1_TKZ: HRM_left_index_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LEFT_INDEX";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 14 15 16 24 25 26 27 28 29 30 37 38 39 40 41 42 43 44 45 52 53 54 55 56 57 58 59 66 67 68 69 70 71 72 73 78 79 80 81 82 83 84>;
            hold-trigger-on-release;
        };

        HRM_right_index_v1_TKZ: HRM_right_index_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RIGHT_INDEX";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 17 18 19 20 21 22 23 31 32 33 34 35 36 46 47 48 49 50 51 60 61 62 63 64 65 74 75 76 77>;
            hold-trigger-on-release;
        };

        HRM_right_middy_v1_TKZ: HRM_right_middy_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RIGHT_MIDDLE";
            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 17 18 19 20 21 22 23 31 32 33 34 35 36 46 47 48 49 50 51 60 61 62 63 64 65 74 75 76 77>;
            hold-trigger-on-release;
        };

        HRM_right_ring_v1_TKZ: HRM_right_ring_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RIGHT_RING";
            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 17 18 19 20 21 22 23 31 32 33 34 35 36 46 47 48 49 50 51 60 61 62 63 64 65 74 75 76 77>;
            hold-trigger-on-release;
        };

        HRM_right_pinky_v1_TKZ: HRM_right_pinky_v1_TKZ {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RIGHT_PINKY";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 17 18 19 20 21 22 23 31 32 33 34 35 36 46 47 48 49 50 51 60 61 62 63 64 65 74 75 76 77>;
            hold-trigger-on-release;
        };

        /* Enhanced space behaviors for mouse */
        left_space: left_space {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_SPACE";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 78 79 80 81 82 83 84>;
            hold-trigger-on-release;
        };

        /* Right space: MOMENTARY access to mouse layer */
        right_space: right_space {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_SPACE";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77>;
            hold-trigger-on-release;
        };

        /* Macro to display layer information */
        show_layers: show_layers {
            compatible = "zmk,behavior-macro";
            label = "SHOW_LAYERS";
            #binding-cells = <0>;
            bindings = <&kp L &kp A &kp Y &kp E &kp R &kp S>;
        };

        /* Macro to display layer access methods */
        show_access: show_access {
            compatible = "zmk,behavior-macro";
            label = "SHOW_ACCESS";
            #binding-cells = <0>;
            bindings = <&kp A &kp C &kp C &kp E &kp S &kp S>;
        };

        /* Macro for version info */
        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "MACRO_VER";
            #binding-cells = <0>;
            bindings = <&kp V &kp E &kp R &kp SPACE &kp N1 &kp DOT &kp N0>;
        };

        /* Studio unlock placeholder */
        studio_unlock: studio_unlock {
            compatible = "zmk,behavior-macro";
            label = "STUDIO_UNLOCK";
            #binding-cells = <0>;
            bindings = <&kp S &kp T &kp U &kp D &kp I &kp O>;
        };

        /* Tap dance for backslash info - single tap shows layers, double tap shows access */
        bslh_info_td: bslh_info_td {
            compatible = "zmk,behavior-tap-dance";
            label = "BSLH_INFO_TD";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&show_layers>, <&show_access>;
        };

        /* Mod-morph for RALT + \ to show info */
        ralt_bslh_info: ralt_bslh_info {
            compatible = "zmk,behavior-mod-morph";
            label = "RALT_BSLH_INFO";
            #binding-cells = <0>;
            bindings = <&kp BSLH>, <&bslh_info_td>;
            mods = <(MOD_RALT)>;
        };
    };

    /* Enhanced combos for mouse speed control */
    combos {
        compatible = "zmk,combos";
        
        /* Mouse speed toggles when in mouse layers */
        combo_mouse_slow {
            timeout-ms = <50>;
            key-positions = <47 54>; /* A + K for mouse slow */
            bindings = <&to 4>;
            layers = <2 4 5 6>;
        };

        combo_mouse_fast {
            timeout-ms = <50>;
            key-positions = <48 54>; /* S + K for mouse fast */
            bindings = <&to 5>;
            layers = <2 4 5 6>;
        };

        combo_mouse_warp {
            timeout-ms = <50>;
            key-positions = <49 54>; /* D + K for mouse warp */
            bindings = <&to 6>;
            layers = <2 4 5 6>;
        };

        /* Return to normal mouse speed */
        combo_mouse_normal {
            timeout-ms = <50>;
            key-positions = <50 54>; /* F + K for normal mouse */
            bindings = <&to 2>;
            layers = <4 5 6>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        /         * LAYER DOCUMENTATION
         * ===================
         * 
         * LAYERS:
         * 0 - HRM (Home Row Mods) - Default layer with home row modifiers
         * 1 - Pure Base - Standard keyboard without home row mods
         * 2 - Mouse - Mouse control with movement and clicks
         * 3 - Function - F-keys and numpad
         * 4 - Mouse Slow - Slow mouse movement
         * 5 - Mouse Fast - Fast mouse movement
         * 6 - Mouse Warp - Warp speed mouse movement
         * 7 - Mouse Karabiner - Works with Karabiner-Elements mouse script
         *     When active, all right-hand keys send Right Option + key
         *     This triggers the Karabiner mouse control system:
         *     - Movement: I/J/K/L (with acceleration)
         *     - Speed modes: F (fine), D/G (fast) - hold while moving
         *     - Clicks: U (left), O (right), ; (middle), P (double)
         *     - Scrolling: Y/H (vert), N/M (horiz)
         *     - Alt click: Left Space
         *
         * LAYER ACCESS METHODS:
         * - Layers 0-3: RCtrl + Number (0-3)
         * - Layer 2 (Mouse): Hold Right Space (momentary)
         * - Layer 3 (Fn): Top right key
         * - Layer 4-6 (Mouse speeds): A/S/D + K combos in mouse layers
         * - Layer 7 (Mouse Karabiner): Hold Right Space (momentary from layers 0-1)
         *
         * SPECIAL KEY BEHAVIORS:
         * - Caps Lock: Tap = ESC, Cmd+Tap = Cmd+Grave, Hold = Right Alt
         * - Left Space: Tap = Backspace, Hold = Left Cmd
         * - Right Space: Tap = Space, Hold = Layer 7 (Mouse Karabiner)
         * - Backslash: Normal = \, Right Alt + \ = Display info
         *   Single tap: Show layer names, Double tap: Show access methods
         *   (Hold Caps Lock and tap/double-tap \ for info displays)
         *
         * KEY COMBOS:
         * - Right Alt + \ (single tap): Display layer info (layers 0-6)
         * - Right Alt + \ (double tap): Display access methods (layers 0-6)
         *   Note: These combos don't work in layer 7 as it already applies Right Alt
         * - A + K: Mouse slow (in mouse layers)
         * - S + K: Mouse fast (in mouse layers)
         * - D + K: Mouse warp (in mouse layers)
         * - F + K: Return to normal mouse (in speed layers)
         */

        // Layer 0: Home Row Mods Layer
        hrm_layer {
            display-name = "HRM";
            bindings = <
&kp ESC    &kp C_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PREV  &kp C_PP       &kp C_NEXT     &bl BL_CYCLE  &kp F11    &kp LS(LC(LG(NUMBER_4)))  &kp LC(UP_ARROW)  &kp LG(SPACE)  &bt BT_CLR  &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp K_POWER  &to 3
&kp GRAVE  &rctrl_num_1  &rctrl_num_2  &rctrl_num_3  &kp N4      &kp N5         &kp N6         &kp N7        &kp N8     &kp N9                    &rctrl_num_0      &kp MINUS      &kp EQUAL   &kp BSPC
&kp TAB    &kp Q         &kp W         &kp E         &kp R       &kp T          &kp Y          &kp U         &kp I      &kp O                     &kp P             &kp LBKT       &kp RBKT    &ralt_bslh_info        &kp DEL
&caps_esc RALT 0  &HRM_left_pinky_v1_TKZ LSHFT A  &HRM_left_ring_v1_TKZ LCTRL S  &HRM_left_middy_v1_TKZ LALT D  &HRM_left_index_v1_TKZ LGUI F  &kp G      &kp H     &HRM_right_index_v1_TKZ LGUI J  &HRM_right_middy_v1_TKZ RALT K  &HRM_right_ring_v1_TKZ RCTRL L  &HRM_right_pinky_v1_TKZ RSHFT SEMI &kp SQT  &kp RET &kp PG_UP
&kp LSHFT  &kp Z         &kp X         &kp C         &kp V       &kp B          &kp N          &kp M         &kp COMMA  &kp DOT                   &kp FSLH          &kp RSHFT      &kp UP      &kp PG_DN
&kp LCTRL  &kp LALT      &kp LALT      &left_space LGUI BSPC  &right_space 7 SPACE   &kp RIGHT_GUI  &kp RIGHT_ALT  &kp RCTRL     &kp LEFT   &kp DOWN                  &kp RIGHT
            >;
        };

        // Layer 1: Pure Base Layer
        pure_base {
            display-name = "Pure";
            bindings = <
&kp ESC    &kp C_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PREV  &kp C_PP       &kp C_NEXT     &bl BL_CYCLE  &kp F11    &kp LS(LC(LG(NUMBER_4)))  &kp LC(UP_ARROW)  &kp LG(SPACE)  &bt BT_CLR  &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp K_POWER  &to 3
&kp GRAVE  &rctrl_num_1  &rctrl_num_2  &rctrl_num_3  &kp N4      &kp N5         &kp N6         &kp N7        &kp N8     &kp N9                    &rctrl_num_0      &kp MINUS      &kp EQUAL   &kp BSPC
&kp TAB    &kp Q         &kp W         &kp E         &kp R       &kp T          &kp Y          &kp U         &kp I      &kp O                     &kp P             &kp LBKT       &kp RBKT    &ralt_bslh_info        &kp DEL
&caps_esc RALT 0  &kp A         &kp S         &kp D         &kp F       &kp G          &kp H          &kp J         &kp K      &kp L                     &kp SEMI          &kp SQT        &kp RET     &kp PG_UP
&kp LSHFT  &kp Z         &kp X         &kp C         &kp V       &kp B          &kp N          &kp M         &kp COMMA  &kp DOT                   &kp FSLH          &kp RSHFT      &kp UP      &kp PG_DN
&kp LCTRL  &kp LALT      &kp LALT      &left_space LGUI BSPC  &right_space 7 SPACE   &kp RIGHT_GUI  &kp RIGHT_ALT  &kp RCTRL     &kp LEFT   &kp DOWN                  &kp RIGHT
            >;
        };

        // Layer 2: Mouse Layer - with speed control keys
        mouse_layer {
            display-name = "Mouse";
            bindings = <
&kp ESC    &kp C_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PREV  &kp C_PP       &kp C_NEXT     &bl BL_CYCLE  &kp F11    &kp LS(LC(LG(NUMBER_4)))  &kp LC(UP_ARROW)  &kp LG(SPACE)  &bt BT_CLR  &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp K_POWER  &to 0
&kp GRAVE  &rctrl_num_1  &rctrl_num_2  &rctrl_num_3  &kp N4      &kp N5         &kp N6         &kp N7        &kp N8     &kp N9                    &rctrl_num_0      &kp MINUS      &kp EQUAL   &kp BSPC
&kp TAB    &kp Q         &kp W         &kp E         &kp R       &kp T          &kp Y          &mkp LCLK     &mmv MOVE_UP  &mkp RCLK              &kp P             &kp LBKT       &kp RBKT    &ralt_bslh_info        &kp DEL
&caps_esc RALT 0  &to 4         &to 5         &to 6         &kp F       &kp G          &kp H          &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT     &mkp MCLK         &kp SQT        &kp RET     &kp PG_UP
&kp LSHFT  &kp Z         &kp X         &kp C         &kp V       &kp B          &kp N          &kp M         &kp COMMA  &kp DOT                   &kp FSLH          &kp RSHFT      &kp UP      &kp PG_DN
&kp LCTRL  &kp LGUI      &kp LEFT_GUI  &left_space LGUI BSPC  &kp SPACE      &kp RIGHT_GUI  &kp RIGHT_ALT  &kp RCTRL     &kp LEFT   &kp DOWN                  &kp RIGHT
            >;
        };

        // Layer 3: Function Layer
        raise {
            display-name = "Fn";
            bindings = <
&kp ESCAPE      &kp F1  &kp F2  &kp F3     &kp F4      &kp F5  &kp F6      &kp F7     &kp F8       &kp F9         &kp F10          &kp F11          &kp F12    &kp HOME       &kp END     &none  &to 0
&none           &rctrl_num_1   &rctrl_num_2   &rctrl_num_3      &none       &none   &none       &none      &kp KP_NLCK  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS        &kp EQUAL  &kp BACKSPACE
&kp TAB         &none   &none   &none      &none       &none   &none       &kp KP_N7  &kp KP_N8    &kp KP_N9      &kp KP_MINUS     &none            &none      &ralt_bslh_info          &kp DELETE
&none           &none   &none   &none      &none       &none   &none       &kp KP_N4  &kp KP_N5    &kp KP_N6      &kp KP_PLUS      &none            &kp ENTER  &kp PAGE_UP
&kp LEFT_SHIFT  &none   &none   &none      &none       &none   &none       &kp KP_N1  &kp KP_N2    &kp KP_N3      &kp KP_ENTER     &kp RIGHT_SHIFT  &kp UP     &kp PAGE_DOWN
&none           &none   &none   &kp SPACE  &kp KP_N0   &none   &kp KP_DOT  &none      &kp LEFT     &kp DOWN       &kp RIGHT
            >;
        };

        // Layer 4: Mouse Slow Layer
        mouse_slow {
            display-name = "MouseSlow";
            bindings = <
&kp ESC    &kp C_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PREV  &kp C_PP       &kp C_NEXT     &bl BL_CYCLE  &kp F11    &kp LS(LC(LG(NUMBER_4)))  &kp LC(UP_ARROW)  &kp LG(SPACE)  &bt BT_CLR  &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp K_POWER  &to 0
&kp GRAVE  &rctrl_num_1  &rctrl_num_2  &rctrl_num_3  &kp N4      &kp N5         &kp N6         &kp N7        &kp N8     &kp N9                    &rctrl_num_0      &kp MINUS      &kp EQUAL   &kp BSPC
&kp TAB    &kp Q         &kp W         &kp E         &kp R       &kp T          &kp Y          &mkp LCLK     &mmv MOVE_UP  &mkp RCLK              &kp P             &kp LBKT       &kp RBKT    &ralt_bslh_info        &kp DEL
&caps_esc RALT 0  &to 4         &to 5         &to 6         &to 2       &kp G          &kp H          &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT     &mkp MCLK         &kp SQT        &kp RET     &kp PG_UP
&kp LSHFT  &kp Z         &kp X         &kp C         &kp V       &kp B          &kp N          &kp M         &kp COMMA  &kp DOT                   &kp FSLH          &kp RSHFT      &kp UP      &kp PG_DN
&kp LCTRL  &kp LGUI      &kp LEFT_GUI  &left_space LGUI BSPC  &kp SPACE      &kp RIGHT_GUI  &kp RIGHT_ALT  &kp RCTRL     &kp LEFT   &kp DOWN                  &kp RIGHT
            >;
        };

        // Layer 5: Mouse Fast Layer
        mouse_fast {
            display-name = "MouseFast";
            bindings = <
&kp ESC    &kp C_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PREV  &kp C_PP       &kp C_NEXT     &bl BL_CYCLE  &kp F11    &kp LS(LC(LG(NUMBER_4)))  &kp LC(UP_ARROW)  &kp LG(SPACE)  &bt BT_CLR  &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp K_POWER  &to 0
&kp GRAVE  &rctrl_num_1  &rctrl_num_2  &rctrl_num_3  &kp N4      &kp N5         &kp N6         &kp N7        &kp N8     &kp N9                    &rctrl_num_0      &kp MINUS      &kp EQUAL   &kp BSPC
&kp TAB    &kp Q         &kp W         &kp E         &kp R       &kp T          &kp Y          &mkp LCLK     &mmv MOVE_UP  &mkp RCLK              &kp P             &kp LBKT       &kp RBKT    &kp BSLH        &kp DEL
&caps_esc RALT 0  &to 4         &to 5         &to 6         &to 2       &kp G          &kp H          &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT     &mkp MCLK         &kp SQT        &kp RET     &kp PG_UP
&kp LSHFT  &kp Z         &kp X         &kp C         &kp V       &kp B          &kp N          &kp M         &kp COMMA  &kp DOT                   &kp FSLH          &kp RSHFT      &kp UP      &kp PG_DN
&kp LCTRL  &kp LGUI      &kp LEFT_GUI  &left_space LGUI BSPC  &kp SPACE      &kp RIGHT_GUI  &kp RIGHT_ALT  &kp RCTRL     &kp LEFT   &kp DOWN                  &kp RIGHT
            >;
        };

        // Layer 6: Mouse Warp Layer
        mouse_warp {
            display-name = "MouseWarp";
            bindings = <
&kp ESC    &kp C_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PREV  &kp C_PP       &kp C_NEXT     &bl BL_CYCLE  &kp F11    &kp LS(LC(LG(NUMBER_4)))  &kp LC(UP_ARROW)  &kp LG(SPACE)  &bt BT_CLR  &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp K_POWER  &to 0
&kp GRAVE  &rctrl_num_1  &rctrl_num_2  &rctrl_num_3  &kp N4      &kp N5         &kp N6         &kp N7        &kp N8     &kp N9                    &rctrl_num_0      &kp MINUS      &kp EQUAL   &kp BSPC
&kp TAB    &kp Q         &kp W         &kp E         &kp R       &kp T          &kp Y          &mkp LCLK     &mmv MOVE_UP  &mkp RCLK              &kp P             &kp LBKT       &kp RBKT    &kp BSLH        &kp DEL
&caps_esc RALT 0  &to 4         &to 5         &to 6         &to 2       &kp G          &kp H          &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT     &mkp MCLK         &kp SQT        &kp RET     &kp PG_UP
&kp LSHFT  &kp Z         &kp X         &kp C         &kp V       &kp B          &kp N          &kp M         &kp COMMA  &kp DOT                   &kp FSLH          &kp RSHFT      &kp UP      &kp PG_DN
&kp LCTRL  &kp LGUI      &kp LEFT_GUI  &left_space LGUI BSPC  &kp SPACE      &kp RIGHT_GUI  &kp RIGHT_ALT  &kp RCTRL     &kp LEFT   &kp DOWN                  &kp RIGHT
            >;
        };

        // Layer 7: Mouse Karabiner Layer
        mouse_karabiner {
            display-name = "MouseKar";
            bindings = <
&kp ESC    &kp C_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PREV  &kp C_PP       &kp C_NEXT     &bl BL_CYCLE  &kp F11    &kp LS(LC(LG(NUMBER_4)))  &kp LC(UP_ARROW)  &kp LG(SPACE)  &bt BT_CLR  &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp K_POWER  &to 3
&kp GRAVE  &rctrl_num_1  &rctrl_num_2  &rctrl_num_3  &kp N4      &kp N5         &kp RA(N6)     &kp RA(N7)    &kp RA(N8)  &kp RA(N9)               &kp RA(N0)        &kp RA(MINUS)  &kp RA(EQUAL) &kp RA(BSPC)
&kp TAB    &kp Q         &kp W         &kp E         &kp R       &kp T          &kp RA(Y)      &kp RA(U)     &kp RA(I)   &kp RA(O)                &kp RA(P)         &kp RA(LBKT)   &kp RA(RBKT)  &kp RA(BSLH)    &kp RA(DEL)
&caps_esc RALT 0  &kp A         &kp S         &kp RA(D)     &kp RA(F)   &kp RA(G)      &kp RA(H)      &kp RA(J)     &kp RA(K)   &kp RA(L)                &kp RA(SEMI)      &kp RA(SQT)    &kp RA(RET)   &kp RA(PG_UP)
&kp LSHFT  &kp Z         &kp X         &kp C         &kp V       &kp B          &kp RA(N)      &kp RA(M)     &kp RA(COMMA) &kp RA(DOT)            &kp RA(FSLH)      &kp RA(RSHFT)  &kp RA(UP)    &kp RA(PG_DN)
&kp LCTRL  &kp LALT      &kp LALT      &kp RA(SPACE)           &kp SPACE      &kp RA(RIGHT_GUI)  &kp RA(RIGHT_ALT)  &kp RA(RCTRL)  &kp RA(LEFT)  &kp RA(DOWN)            &kp RA(RIGHT)
            >;
        };
    };
};
